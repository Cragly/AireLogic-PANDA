// <auto-generated />
using System;
using AireLogic.PANDA.API.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AireLogic.PANDA.API.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250316155408_Initial-Create")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("PANDA")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AireLogic.PANDA.API.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicianId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicianId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments", "PANDA");

                    b.HasData(
                        new
                        {
                            Id = new Guid("343d31d4-5993-47ef-a468-7884a467ae80"),
                            ClinicianId = new Guid("b7fd5c25-61d6-4634-82f0-e18f27b51f2a"),
                            Department = "oncology",
                            Duration = 15,
                            EndTime = new DateTimeOffset(new DateTime(2018, 1, 21, 16, 45, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PatientId = new Guid("9a9e8d7e-58d2-4ecc-93f1-4425f1e51bec"),
                            Postcode = "UB56 7XQ",
                            StartTime = new DateTimeOffset(new DateTime(2018, 1, 21, 16, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("01542f70-929f-4c9a-b4fa-e672310d7e78"),
                            ClinicianId = new Guid("9eafd270-8071-4a09-85ba-f040a7b57e90"),
                            Department = "oncology",
                            Duration = 60,
                            EndTime = new DateTimeOffset(new DateTime(2025, 6, 4, 17, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            PatientId = new Guid("892bde48-96da-4bad-8114-a7fe62109462"),
                            Postcode = "IM2N 4LG",
                            StartTime = new DateTimeOffset(new DateTime(2025, 6, 4, 16, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("70ead2bc-40c1-42ef-8d00-60c0b38d0a4e"),
                            ClinicianId = new Guid("b85fa2f9-faff-4ed2-b69b-7e5c198e65be"),
                            Department = "gastroentology",
                            Duration = 60,
                            EndTime = new DateTimeOffset(new DateTime(2018, 9, 4, 14, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            PatientId = new Guid("1929d3cf-83c1-487a-838f-c42c023ec42f"),
                            Postcode = "E91 9AE",
                            StartTime = new DateTimeOffset(new DateTime(2018, 9, 4, 13, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            Status = 2
                        });
                });

            modelBuilder.Entity("AireLogic.PANDA.API.Domain.Entities.Clinician", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Clinicians", "PANDA");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7fd5c25-61d6-4634-82f0-e18f27b51f2a"),
                            Department = "oncology",
                            Name = "Jason Holloway"
                        },
                        new
                        {
                            Id = new Guid("9eafd270-8071-4a09-85ba-f040a7b57e90"),
                            Department = "oncology",
                            Name = "Bethany Rice-Hammond"
                        },
                        new
                        {
                            Id = new Guid("b85fa2f9-faff-4ed2-b69b-7e5c198e65be"),
                            Department = "gastroentology",
                            Name = "Joseph Savage"
                        });
                });

            modelBuilder.Entity("AireLogic.PANDA.API.Domain.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NhsNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Patients", "PANDA");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a9e8d7e-58d2-4ecc-93f1-4425f1e51bec"),
                            DateOfBirth = new DateOnly(1996, 2, 1),
                            FirstName = "Glenn",
                            NhsNumber = "1373645350",
                            Postcode = "N6 2FA",
                            Surname = "Clark",
                            Title = "Dr"
                        },
                        new
                        {
                            Id = new Guid("892bde48-96da-4bad-8114-a7fe62109462"),
                            DateOfBirth = new DateOnly(1963, 8, 27),
                            FirstName = "Ian",
                            NhsNumber = "1953262716",
                            Postcode = "WA55 8HE",
                            Surname = "Hall",
                            Title = "Dr"
                        },
                        new
                        {
                            Id = new Guid("1929d3cf-83c1-487a-838f-c42c023ec42f"),
                            DateOfBirth = new DateOnly(2002, 2, 12),
                            FirstName = "Bryan",
                            NhsNumber = "0021403597",
                            Postcode = "M4 2ST",
                            Surname = "Hall",
                            Title = "Dr"
                        });
                });

            modelBuilder.Entity("AireLogic.PANDA.API.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("AireLogic.PANDA.API.Domain.Entities.Clinician", null)
                        .WithMany()
                        .HasForeignKey("ClinicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AireLogic.PANDA.API.Domain.Entities.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
